version = "latest-SNAPSHOT"
apply plugin: PharoPlugin

pharo {
    imageVersion = '90'
}

def imageName = "${project.name}-${project.version}"

def Properties properties = new Properties()
properties.load(project.rootProject.file('gradle-local.properties').newDataInputStream())
def customPharoPath = properties.getProperty('pharoPath')
def customPharoUiPath = properties.getProperty('pharoUiPath')
def customPharoArgs = properties.getProperty('pharoArgs').split(",").toList()

task removePreviousPharoImage(type: RemovePreviousPharoImageTask)

task downloadFreshImage(type: DownloadPharoImageTask, dependsOn: removePreviousPharoImage)

task loadGitFileTree(type: LoadMetacelloConfigTask, dependsOn: downloadFreshImage) {
    repository = "http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo${pharo.imageVersion}/main"
    configuration = 'ConfigurationOfGitFileTree'
    version = 'stable'
    pharoPath = customPharoPath
    commonPharoArgs = customPharoArgs
}

task loadProject(type: LoadMetacelloConfigTask, dependsOn: loadGitFileTree) {
    repository = "gitfiletree://${project.projectDir}"
    configuration = 'ConfigurationOfPharoEdaRestApi'
    version = 'bleedingEdge'
    group = 'default'
    pharoPath = customPharoPath
    commonPharoArgs = customPharoArgs
}

task customizeImage(type: RunSmalltalkScriptTask, dependsOn: loadProject) {
    script = "customize.st"
    pharoPath = customPharoPath
    commonPharoArgs = customPharoArgs
}

task assemble(type: SavePharoImageTask, dependsOn: customizeImage) {
    toImageName = imageName
    shouldDeleteOldImage = true
    pharoPath = customPharoPath
    commonPharoArgs = customPharoArgs
}

task loadProjectTests(type: LoadMetacelloConfigTask, dependsOn: assemble) {
    image = imageName
    repository = "gitfiletree://${project.projectDir}"
    configuration = 'ConfigurationOfPharoEdaRestApi'
    version = 'bleedingEdge'
    group = 'CompleteWithTests'
    pharoPath = customPharoPath
    commonPharoArgs = customPharoArgs
}

task test(type: RunPharoTestsTask, dependsOn: loadProjectTests) {
    image = imageName
    packageName = "CC-**-Tests"
    shouldOutputAsJUnit = true
    pharoPath = customPharoPath
    commonPharoArgs = customPharoArgs
}

task clean(type: Delete) {
    def foldersToDelete = []
    new File('.').eachDir {
        if (it.name.startsWith('image.')) {
            foldersToDelete << it.name
        }
    }
    delete foldersToDelete +
            ["${imageName}.image", "${imageName}.changes", 'package-cache', 'play-cache', 'pharo-local', 'github-cache', '.gradle', 'PharoDebug.log']
}

task run(type:Exec) {
    args = ["${imageName}.image", "eval", "--no-quit", "SettingBrowser open. CCEDAApplication setup start"]
    executable = customPharoPath
}

task runUI(type:Exec) {
    args = ["${imageName}.image", "eval", "--no-quit", "SettingBrowser open. CCEDAApplication setup start"]
    executable = customPharoUiPath
}

class PharoPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.extensions.create("pharo", PharoPluginExtension)
    }
}

class PharoPluginExtension {
    String zeroConfUrl = "http://get.pharo.org"
    String imageVersion = 'stable'
}

class RemovePreviousPharoImageTask extends DefaultTask {
    @TaskAction
    def removePreviousPharoImage() {
        project.exec {
            commandLine "bash", "-c", "rm -f Pharo.image Pharo.changes"
        }
    }
}

class DownloadPharoImageTask extends DefaultTask {
    @TaskAction
    def downloadFreshImage() {
        def cmd = (System.getProperty('os.name').startsWith('Mac') ? 'curl' : 'wget -O-')
        project.exec {
            commandLine "bash", "-c", "${cmd} ${project.pharo.zeroConfUrl}/${project.pharo.imageVersion} | bash"
        }
    }
}

class SavePharoImageTask extends DefaultTask {
    String fromImageName = "Pharo.image"
    String pharoPath = "pharo"
    def commonPharoArgs
    String toImageName
    boolean shouldDeleteOldImage

    @TaskAction
    def renamePharoImage() {
        def pharoArgs = []
        pharoArgs.addAll(commonPharoArgs)
        pharoArgs.addAll([fromImageName, "save", toImageName])
        if (shouldDeleteOldImage) {
            pharoArgs << "--delete-old"
        }
        project.exec {
            executable "${pharoPath}"
            args pharoArgs
        }
    }
}

class LoadMetacelloConfigTask extends DefaultTask {
    String image = "Pharo.image"
    String pharoPath = "pharo"
    def commonPharoArgs
    String repository
    String configuration
    String version

    @TaskAction
    def loadMetacelloConfig() {
        def pharoArgs = []
        pharoArgs.addAll(commonPharoArgs)
        pharoArgs.addAll([image, "config", repository, configuration, "--install=${version}"])
        project.exec {
            executable "${pharoPath}"
            args pharoArgs
        }
    }
}

class EvalSmalltalkExpressionTask extends DefaultTask {
    String image = "Pharo.image"
    String pharoPath = "pharo"
    def commonPharoArgs
    String expression

    @TaskAction
    def evalSmalltalkExpression() {
        def pharoArgs = []
        pharoArgs.addAll(commonPharoArgs)
        pharoArgs.addAll([image, "eval", "--save", expression])
        project.exec {
            executable "${pharoPath}"
            args pharoArgs
        }
    }
}

class RunSmalltalkScriptTask extends DefaultTask {
    String image = "Pharo.image"
    String pharoPath = "pharo"
    def commonPharoArgs
    String script

    @TaskAction
    def runSmalltalkScript() {
       def pharoArgs = []
       pharoArgs.addAll(commonPharoArgs)
       pharoArgs.addAll([image, "st", "--quit", "--save", script])
       project.exec {
           executable "${pharoPath}"
           args pharoArgs
       }
    }
}

class RunPharoTestsTask extends DefaultTask {
    String image = "Pharo.image"
    String pharoPath = "pharo"
    def commonPharoArgs
    String packageName
    boolean shouldOutputAsJUnit

    @TaskAction
    def runTests() {
        def pharoArgs = []
        pharoArgs.addAll(commonPharoArgs)
        pharoArgs.addAll([image, "test", packageName])
        if (shouldOutputAsJUnit) {
            pharoArgs << "--junit-xml-output"
        }
        project.exec {
            executable "${pharoPath}"
            args pharoArgs
        }
    }
}
